# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/00_MolStandardizer.ipynb (unless otherwise specified).

__all__ = ['remove_mixture', 'MolStandardizer']

# Cell

from rdkit import RDLogger
RDLogger.DisableLog('rdApp.info')
from rdkit import Chem
from molvs import Standardizer

def remove_mixture(mol):
    '''
    Function to remove mixture
    '''
    for n, frag in enumerate(Chem.GetMolFrags(mol, asMols=True), 1):
        if n > 1:
            raise Exception("mixture")
        if n == 1:
            parent = mol
        else:
            raise Exception("error")
    return parent

def MolStandardizer(smiles):
    '''
    The main function for molecular standardization:
    - Sanitizing with RDKit: santize mol; remove Hs; disconnect metals; normalize mol; reionize mol; recalculate stereochemistry.
    - Replace all atoms with the most abundant isotope for that element.
    - Remove counterions in the salts and neutralize the molecules.
    - Remove the mixture.
    '''
    try:
        mol = Chem.MolFromSmiles(smiles)
        smiles = Chem.MolToSmiles(mol) # canonical smiles
        mol = Chem.MolFromSmiles(smiles)

        s = Standardizer()
        mol = s.standardize(mol) #santize mol; remove Hs; disconnect metals; normalize mol; reionize mol
        mol = s.remove_fragments(mol) # The full list of FragmentPatterns: https://github.com/mcs07/MolVS/blob/master/molvs/fragment.py
        mol = s.uncharge(mol) # uncharge molecules by adding and/or removing hydrogens
        mol = s.isotope_parent(mol)
        mol = s.standardize(mol)
        mol = remove_mixture(mol)
        return Chem.MolToSmiles(mol)
    except:
#         print("%s failed conversion"%smiles)
        return "NaN"